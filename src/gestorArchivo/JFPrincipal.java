/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestorArchivo;

import analizadorsintactico.Parser;
import analizadorlexico.AnalizadorLexico;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import analizadorlexico.objetos.ListaTercetos;
import analizadorlexico.TablaDeSimbolos;
import assembler.TercetoToAssemblerVA;
import analizadorlexico.Token;
import java.util.Set;

/**
 *
 * @author nicob
 */
public class JFPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form JFPrincipal
     */    
    public JFPrincipal() {
        initComponents();
        jTA_consola.setEditable(false);
        TextLineNumber tln = new TextLineNumber(jTP_editor);
        jSP_editor.setRowHeaderView(tln);    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu4 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jPopupMenu4 = new javax.swing.JPopupMenu();
        jPopupMenu5 = new javax.swing.JPopupMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTA_consola = new javax.swing.JTextArea();
        jSP_editor = new javax.swing.JScrollPane();
        jTP_editor = new javax.swing.JTextPane();
        jMB_menuPrincipal = new javax.swing.JMenuBar();
        jM_archivo = new javax.swing.JMenu();
        jMI_cargar = new javax.swing.JMenuItem();
        jMI_guardar = new javax.swing.JMenuItem();
        jMI_guardar_consola = new javax.swing.JMenuItem();
        jM_compilador = new javax.swing.JMenu();
        jMI_Alexico = new javax.swing.JMenuItem();
        jMI_Asintactico = new javax.swing.JMenuItem();
        jM_tercetos = new javax.swing.JMenu();
        jM_assembler = new javax.swing.JMenu();

        jMenu4.setText("jMenu4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTA_consola.setBackground(new java.awt.Color(51, 51, 51));
        jTA_consola.setColumns(20);
        jTA_consola.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        jTA_consola.setForeground(new java.awt.Color(0, 255, 0));
        jTA_consola.setRows(5);
        jScrollPane2.setViewportView(jTA_consola);

        jTP_editor.setText(
            "#TP3_TP2_16#\n" +
            "#Colocada una selección para verificar el resultado de las expresiones y conversiones#\n" +
            "\n" +
            "integer _var,\n" +
            "_var := 3_i,\n" +
            "_var := _var - 123_i,\n" +
            "_var := _var - - 123_i,\n" +
            "if ( _var = 3_i)\n" +
            "	print('iguales'),"
        );
        jTP_editor.setToolTipText("");
        jSP_editor.setViewportView(jTP_editor);

        jM_archivo.setText("Archivo");

        jMI_cargar.setText("Cargar");
        jMI_cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_cargarActionPerformed(evt);
            }
        });
        jM_archivo.add(jMI_cargar);

        jMI_guardar.setText("Guardar");
        jMI_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_guardarActionPerformed(evt);
            }
        });
        jM_archivo.add(jMI_guardar);

        jMI_guardar_consola.setText("Guardar salida");
        jMI_guardar_consola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_guardar_consolaActionPerformed(evt);
            }
        });
        jM_archivo.add(jMI_guardar_consola);

        jMB_menuPrincipal.add(jM_archivo);

        jM_compilador.setText("Compilador");

        jMI_Alexico.setText("Análisis léxico");
        jMI_Alexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_AlexicoActionPerformed(evt);
            }
        });
        jM_compilador.add(jMI_Alexico);

        jMI_Asintactico.setText("Análisis sintáctico");
        jMI_Asintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_AsintacticoActionPerformed(evt);
            }
        });
        jM_compilador.add(jMI_Asintactico);

        jMB_menuPrincipal.add(jM_compilador);

        jM_tercetos.setText("Codigo intermedio");
        jM_tercetos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jM_tercetosMouseClicked(evt);
            }
        });
        jMB_menuPrincipal.add(jM_tercetos);

        jM_assembler.setText("Código assembler");
        jM_assembler.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jM_assemblerMouseClicked(evt);
            }
        });
        jMB_menuPrincipal.add(jM_assembler);

        setJMenuBar(jMB_menuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSP_editor, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSP_editor, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMI_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_guardarActionPerformed
        // TODO add your handling code here:
        //new Save().Text(this, jTA_editor.getText(), "Guardar distribución");
        new Save().Text(this, jTP_editor.getText(), "Guardar distribución");
        
    }//GEN-LAST:event_jMI_guardarActionPerformed

    private void jMI_AsintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_AsintacticoActionPerformed
        this.analizadorLexico();
        this.analizadorSintactico();  
    }//GEN-LAST:event_jMI_AsintacticoActionPerformed
    
    void analizadorLexico(){
        
        AnalizadorLexico analizadorLexico = new AnalizadorLexico(jTP_editor.getText()+"\n");
        analizadorlexico.Token token;
        jTA_consola.setText(
        "______________________________________________________________\n"+
        "ETAPA DE ANALISIS LEXICO : \n" +
        "_______________________________________________________________\n" +
        "TOKENS RECONOCIDOS Y ANUNCIO DE ERRORES:\n\n");
        while ((token = analizadorLexico.getNextToken()) != null) {
            jTA_consola.append(
            "TOKEN ID: " + token.getValor() + " | LEXEMA: " + token.getLexema() + " | LÍNEA: " + token.getLinea() + "\n");
        }
        jTA_consola.setText(jTA_consola.getText().concat(
        "______________________________________________________________\n"+
        "TABLA DE SIMBOLOS:\n"+
        AnalizadorLexico.getTablaDeSimbolos().toString()+
        "______________________________________________________________\n"));
        try {
            jTA_consola.setText(jTA_consola.getText().concat("ERRORES y WARNINGS\n"+
                    ConsoleInterceptor.copyOut(() ->{
                        //AnalizadorLexico analizadorLexic = new AnalizadorLexico(jTA_editor.getText()+"\n");
                        AnalizadorLexico analizadorLexic = new AnalizadorLexico(jTP_editor.getText()+"\n");
                        analizadorlexico.Token ntoken;
                        while ((ntoken = analizadorLexic.getNextToken()) != null) {
                            
                        }})
            ));
        } catch (Exception ex) {
            Logger.getLogger(JFPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    void analizadorSintactico(){
        
        //AnalizadorLexico analizadorLexico = new AnalizadorLexico(jTA_editor.getText()+"\n");  
        AnalizadorLexico analizadorLexico = new AnalizadorLexico(jTP_editor.getText()+"\n");  
        Texto resultado = new Texto();
        Texto errores = new Texto();
        Parser parser = new Parser();
        parser.setArtifacts(analizadorLexico, analizadorLexico.getTablaDeSimbolos(), resultado, errores, new ListaTercetos());
        parser.parse();
        jTA_consola.append(
        "\n"+
        "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n"+
        "______________________________________________________________\n"+
        "ETAPA DE PARSING. REGLAS RECONOCIDAS, ERRORES SINTÁCTICOS\n"+
        "______________________________________________________________\n"+
        "ERRORES SINTACTICOS\n\n"+
        errores.get() +
        "______________________________________________________________\n"+
        "ESTRUCTURAS SINTACTICAS DETECTADAS\n\n"+
        resultado.get() +
        "______________________________________________________________\n"+
        "TABLA DE SIMBOLOS\n\n" +
        analizadorLexico.getTablaDeSimbolos().toString()
        );
    }
    
    
    private void jMI_cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_cargarActionPerformed
        // TODO add your handling code here:
        BufferedReader archivoTexto = new Load().Text(this);
        //jTA_editor.setText("");
        jTP_editor.setText("");
        try {
            String linea = archivoTexto.readLine();
            while (linea != null){                
                //jTA_editor.setText(jTA_editor.getText().concat("\n"+linea));
                jTP_editor.setText(jTP_editor.getText().concat("\n"+linea));
                linea = archivoTexto.readLine();
            }
            
        } catch (IOException ex) {
            Logger.getLogger(JFPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMI_cargarActionPerformed

    private void jMI_AlexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_AlexicoActionPerformed
        
        //AnalizadorLexico analizadorLexico = new AnalizadorLexico(jTA_editor.getText()+"\n");
        AnalizadorLexico analizadorLexico = new AnalizadorLexico(jTP_editor.getText()+"\n");
        analizadorlexico.Token token;
        jTA_consola.setText(
        "______________________________________________________________\n"+
        "TOKENS RECONOCIDOS Y ANUNCIO DE ERRORES:\n\n");
        while ((token = analizadorLexico.getNextToken()) != null) {
            jTA_consola.setText(jTA_consola.getText().concat(
            "TOKEN ID: " + token.getValor() + " | LEXEMA: " + token.getLexema() + " | LÍNEA: " + token.getLinea() + "\n"));
        }
        jTA_consola.setText(jTA_consola.getText().concat(
        "______________________________________________________________\n"+
        "TABLA DE SIMBOLOS:\n\n"+
        AnalizadorLexico.getTablaDeSimbolos().toString()+
        "______________________________________________________________\n"));
        try {
            jTA_consola.setText(jTA_consola.getText().concat("ERRORES y WARNINGS\n\n"+
                    ConsoleInterceptor.copyOut(() ->{
                        //AnalizadorLexico analizadorLexic = new AnalizadorLexico(jTA_editor.getText()+"\n");
                        AnalizadorLexico analizadorLexic = new AnalizadorLexico(jTP_editor.getText()+"\n");
                        analizadorlexico.Token ntoken;
                        while ((ntoken = analizadorLexic.getNextToken()) != null) {
                            
                        }})
            ));
        } catch (Exception ex) {
            Logger.getLogger(JFPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMI_AlexicoActionPerformed

    private void jM_assemblerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jM_assemblerMouseClicked
        // TODO add your handling code here:
        this.getAssembler();
    }//GEN-LAST:event_jM_assemblerMouseClicked

    private void jM_tercetosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jM_tercetosMouseClicked
        // TODO add your handling code here:        
        AnalizadorLexico analizadorLexico = new AnalizadorLexico(jTP_editor.getText()+"\n"); 
        Parser parser = new Parser();
        ListaTercetos lista = new ListaTercetos();
        Texto errores = new Texto();
        parser.setArtifacts(analizadorLexico, analizadorLexico.getTablaDeSimbolos(), new Texto(), errores, lista);
        parser.parse();
        jTA_consola.setText(
        "\n"+
        "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n"+
        "______________________________________________________________\n");
        if(errores.get().equals(""))
            jTA_consola.setText(jTA_consola.getText()+
            "ETAPA DE PRECOMPILACIÓN.\n"+
            "______________________________________________________________\n"+
            "TERCETOS\n\n"+
            lista.toString()
        );
        else
            jTA_consola.setText(
            "ETAPA DE PRECOMPILACIÓN.\n"+
            "______________________________________________________________\n"+
            "ERRORES SEMÁNTICOS\n\n"+
            errores.get()
            );    
    }//GEN-LAST:event_jM_tercetosMouseClicked

    private void jMI_guardar_consolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_guardar_consolaActionPerformed
        // TODO add your handling code here:
        new Save().Text(this, this.jTA_consola.getText(), "Guardar");
    }//GEN-LAST:event_jMI_guardar_consolaActionPerformed
    
    public void getAssembler(){
        AnalizadorLexico analizadorLexico = new AnalizadorLexico(jTP_editor.getText()+"\n"); 
        Parser parser = new Parser();
        ListaTercetos lista = new ListaTercetos();
        Texto errores = new Texto();
        parser.setArtifacts(analizadorLexico, analizadorLexico.getTablaDeSimbolos(), new Texto(), errores, lista);
        parser.parse();
        
        String text = ".386\n" +
                ".model flat, stdcall\n" +
                ".stack 200h ;Tamaño de la pila\n" +
                "option casemap:none\n" +
                "include \\masm32\\include\\windows.inc\n" +
                "include \\masm32\\include\\kernel32.inc\n" +
                "include \\masm32\\include\\user32.inc\n" +
                "includelib \\masm32\\lib\\kernel32.lib\n" +
                "includelib \\masm32\\lib\\user32.lib\n"+
                ".data";   
        TablaDeSimbolos tablaDeSimbolos = AnalizadorLexico.getTablaDeSimbolos();
        String data="_zero DW 0\n_zeroD DD 0.0\n";
        Set<String> keys = tablaDeSimbolos.getKeys();
        for (String key : keys) {
            Token token = tablaDeSimbolos.getToken(key);
            switch(token.getClase()){
                case "doble": 
                    data = data+TercetoToAssemblerVA.tokenToId(token)+" DD "+token.dobleToNumber()+"\n";
                break;                
                case "entero": 
                    String substring = key.substring(0, key.length()-2);
                    data = data+TercetoToAssemblerVA.tokenToId(token)+" DW "+substring+"\n";
                break;
                case "id":
                    if (token.getTipo().equals("double"))
                        data = data+TercetoToAssemblerVA.tokenToId(token)+" DD ?\n";
                    else
                        data = data+TercetoToAssemblerVA.tokenToId(token)+" DW ?\n";
                break;
                case "string" : 
                    String s = token.getLexema();
                    data = data + TercetoToAssemblerVA.tokenToId(token)+" DB \""+ s.substring(1,s.length()-1) +"\", 0 \n";
                break;
            }
        }
        data = data + 
            "mensaje_division_cero DB \"ERROR EN TIEMPO DE EJECUCION -> DIVIDIR POR CERO\", 0\n" +
            "mensaje_overflow_producto DB \"ERROR EN TIEMPO DE EJECUCION -> OVERFLOW EN PRODUCTO\", 0\n"+
            "mensaje_overflow_suma DB \"ERROR EN TIEMPO DE EJECUCION -> OVERFLOW EN SUMA\", 0\n";
        TercetoToAssemblerVA tta = new TercetoToAssemblerVA(lista);
        String codigo=tta.tercetoToAssembler();
        String consola = text+"\n"+data+codigo+
                "JMP @LabelEND\n" +
                "@Label_divzero:\n" +
                "invoke MessageBox, NULL, addr mensaje_division_cero, addr mensaje_division_cero, MB_OK\n" +
                "JMP @LabelEND\n"+
                "@Label_ovfmul:\n" +
                "invoke MessageBox, NULL, addr mensaje_overflow_producto, addr mensaje_overflow_producto, MB_OK\n" +
                "JMP @LabelEND\n"+
                "@Label_ovfadd:\n" +
                "invoke MessageBox, NULL, addr mensaje_overflow_suma, addr mensaje_overflow_suma, MB_OK\n" +
                "@LabelEND:\n"+
                "end start";
        jTA_consola.setText(consola);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMB_menuPrincipal;
    private javax.swing.JMenuItem jMI_Alexico;
    private javax.swing.JMenuItem jMI_Asintactico;
    private javax.swing.JMenuItem jMI_cargar;
    private javax.swing.JMenuItem jMI_guardar;
    private javax.swing.JMenuItem jMI_guardar_consola;
    private javax.swing.JMenu jM_archivo;
    private javax.swing.JMenu jM_assembler;
    private javax.swing.JMenu jM_compilador;
    private javax.swing.JMenu jM_tercetos;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JPopupMenu jPopupMenu4;
    private javax.swing.JPopupMenu jPopupMenu5;
    private javax.swing.JScrollPane jSP_editor;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTA_consola;
    private javax.swing.JTextPane jTP_editor;
    // End of variables declaration//GEN-END:variables

     
}
